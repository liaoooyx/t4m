allprojects {
    version '1.0-SNAPSHOT'
    group 'com.t4m'

    task cleanBuildDir(type: Delete) {
        delete "${projectDir}/build"
        delete "${projectDir}/out"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
        title = project.name + ' ' + project.version
    }

    idea {
        module {
            inheritOutputDirs = true
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    /*Config for Junit test*/
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
        }
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

        compile 'org.slf4j:slf4j-api:1.7.30'
        compile 'ch.qos.logback:logback-core:1.2.3'
        compile 'ch.qos.logback:logback-classic:1.2.3'

    }
}

task buildT4M(type: Copy) {
    dependsOn 't4m-web:build'
    File runDir = new File("${project.rootDir}/run")
    if (runDir.exists()) {
        runDir.listFiles().each {file->file.delete()}
        runDir.delete()
    }
    from 't4m-web/build/libs'
    into 'run/'
}


// gradle -q findDependencyClasspath > deps.txt
task findDependencyClasspath {
    project.allprojects.each { module ->
        tasks.create("findDependencyClasspath_${module.name}", {
            doLast {
                Set<String> depsSet = new HashSet<>()
                module.configurations.each { conf ->
                    if (conf.isCanBeResolved()) {
                        conf.getResolvedConfiguration().getResolvedArtifacts().each { artifact ->
                            def jarPath = artifact.getFile().getAbsolutePath()
                            if (jarPath != null && "" != jarPath) {
                                depsSet.add(jarPath)
                            }
                        }
                    }
                }
                String depsString = depsSet.stream().map { e -> e.concat(File.pathSeparator) }
                        .reduce { a, b -> a.concat(b) }.orElse("")
                new File(module.name + ".deps") << depsString
            }
        })
        findDependencyClasspath.dependsOn("findDependencyClasspath_${module.name}")
    }
    doLast {
        Set<String> depsSet = new HashSet<>()
        project.allprojects.each { module ->
            def moduleName = module.name
            if (file(moduleName + ".deps").exists()) {
                file(moduleName + ".deps").eachLine { line ->
                    line.split(File.pathSeparator).each { jarPath -> depsSet.add(jarPath) }
                }
                file(moduleName + ".deps").delete()
            }
        }
        String depsString = depsSet.stream().map { e -> e.concat(File.pathSeparator) }
                .reduce { a, b -> a.concat(b) }.orElse("")
        depsString = depsString.substring(0, depsString.length() - 1)
//        new File(depsFileName) << depsString
        println depsString
    }
}